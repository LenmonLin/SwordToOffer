/**
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出
 * 那个只出现了一次的元素。
 * 说明：
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 * 示例 1:
 * 输入: [2,2,1]
 * 输出: 1
 * 示例 2:
 * 输入: [4,1,2,1,2]
 * 输出: 4
 * @author LemonLin
 * @Description :BitsingleNumber136LeetCode
 * @date 20.3.29-19:51
 * 思路:
 * 设有一个数组，含有值：12，7，12。并含有一个变量甲，其值为0。
 * ——————第一次：
 * 12：0 0 0 0 1 1 0 0
 * 甲：0 0 0 0 0 0 0 0
 * 异或
 * 甲：0 0 0 0 1 1 0 0（值为12）
 * ——————第二次
 *  7：0 0 0 0 0 1 1 1
 * 甲：0 0 0 0 1 1 0 0
 * 异或
 * 甲：0 0 0 0 1 0 1 1（值为11）
 * ——————第三次
 * 12：0 0 0 0 1 1 0 0
 * 甲：0 0 0 0 1 0 1 1
 * 异或
 * 甲：0 0 0 0 0 1 1 1（值为7）
 * ——————遍历结束
 */
public class BitsingleNumber136LeetCode {
    public int singleNumber(int[] nums) {
        int result=0;
        for (int i=0;i<nums.length;i++){
            result ^=nums[i];
        }
        return result;
    }
}
