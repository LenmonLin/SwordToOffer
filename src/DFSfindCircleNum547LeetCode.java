/**
 * 班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已
 * 知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，
 * 是指所有朋友的集合。
 * 给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已
 * 知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友
 * 圈总数。
 * 示例 1:
 * 输入:
 * [[1,1,0],
 *  [1,1,0],
 *  [0,0,1]]
 * 输出: 2
 * 说明：已知学生0和学生1互为朋友，他们在一个朋友圈。
 * 第2个学生自己在一个朋友圈。所以返回2。
 * 示例 2:
 * 输入:
 * [[1,1,0],
 *  [1,1,1],
 *  [0,1,1]]
 * 输出: 1
 * 说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是
 * 朋友，所以他们三个在一个朋友圈，返回1。
 * 注意：
 * N 在[1,200]的范围内。
 * 对于所有学生，有M[i][i] = 1。
 * 如果有M[i][j] = 1，则有M[j][i] = 1。
 * 思路：深度优先搜索，加上标记法。可仿照200题解题思路。但是如果光按照200题的
 * 四个方向周边的遍历，会出现如下的bug，主要是朋友圈的朋友关系没有理清，朋友圈
 * 的关系是远程打击，不是近处厮杀。举个例子，如果M[0][3]=1，那么就要寻找M[3][j]，
 * 也就是第四行(0为第一行)的每一个值是否为1，除了M[i][i]外（对角线的是自己一个
 * 朋友圈，没有参考性）。可以看到第四行的M[3][2]=1，也就是纵坐标为2,,所以又要去
 * 寻找第三行每一个值。以此类推。
 *bug 示例：
 *  输入:
 * [[1,0,0,1],
 *  [0,1,1,0],
 *  [0,1,1,1],
 *  [1,0,1,1]]
 * 输出
 * 4
 * 预期结果
 * 1
 * @author LemonLin
 * @Description :DFSfindCircleNum547LeetCode
 * @date 20.1.15-11:52
 */
public class DFSfindCircleNum547LeetCode {
    public int findCircleNum(int[][] M) {
        if (M==null||M.length==0)return 0;
        int cnt =0;
        for (int i=0;i<M.length;i++){
            for (int j=0;j<M.length;j++){
                if (M[i][j]==1){
                    cnt++;
                    dfs(M,i,j);
                }
            }
        }
        return cnt;
    }
    public void dfs(int[][] M,int i,int j){
        //M 是矩阵（正方形），所以可以i,j的边界都一样
        if (i<0||j<0||i>M.length-1||j>M.length-1||M[i][j]==0){
            return;
        }
        //这里由于朋友圈的规定要求，不仅M[i][j]=0,同时 M[j][i]也要置零;遍历过一个，
        // 另外一个也无需遍历，同时对角线也要置零
        M[i][j]=0;
        M[i][i]=0;
        M[j][i]=0;
        //遍历一整行，这个是和平时那种遍历周围四个方向的题目很不一样的点，易错
        for (int p =0;p<=M.length-1;p++){
            dfs(M,j,p);
        }
    }

    public static void main(String[] args) {
        int[][]M = {{1,0,0,1},
                        {0,1,1,0},
                        {0,1,1,1},
                        {1,0,1,1}};
        System.out.println(new DFSfindCircleNum547LeetCode().findCircleNum(M));
    }
}
